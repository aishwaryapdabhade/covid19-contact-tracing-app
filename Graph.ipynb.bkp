{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd, numpy as np, matplotlib.pyplot as plt\n",
    "from sklearn.cluster import DBSCAN\n",
    "from geopy.distance import great_circle\n",
    "from shapely.geometry import MultiPoint\n",
    "from numpy import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_parquet(r'C:\\shared_folder\\github_projects\\data\\tmp.parquet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>device_key</th>\n",
       "      <th>unix_time</th>\n",
       "      <th>min_duration_seconds</th>\n",
       "      <th>observation_count</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>zipcode_5</th>\n",
       "      <th>state_abbr</th>\n",
       "      <th>cluster_type2</th>\n",
       "      <th>datetime</th>\n",
       "      <th>str_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>datetime_str_time</th>\n",
       "      <th>datetime_end_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1188</td>\n",
       "      <td>1546378629</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41.854000</td>\n",
       "      <td>-87.651000</td>\n",
       "      <td>60608</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-01 21:37:09+00:00</td>\n",
       "      <td>1546378629</td>\n",
       "      <td>1546378629</td>\n",
       "      <td>2019-01-01 21:37:09+00:00</td>\n",
       "      <td>2019-01-01 21:37:09+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2048</td>\n",
       "      <td>1546353483</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41.840390</td>\n",
       "      <td>-87.783210</td>\n",
       "      <td>60402</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-01 14:38:03+00:00</td>\n",
       "      <td>1546353483</td>\n",
       "      <td>1546353483</td>\n",
       "      <td>2019-01-01 14:38:03+00:00</td>\n",
       "      <td>2019-01-01 14:38:03+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2048</td>\n",
       "      <td>1546538227</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41.849730</td>\n",
       "      <td>-87.728900</td>\n",
       "      <td>60623</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-03 17:57:07+00:00</td>\n",
       "      <td>1546538227</td>\n",
       "      <td>1546538227</td>\n",
       "      <td>2019-01-03 17:57:07+00:00</td>\n",
       "      <td>2019-01-03 17:57:07+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2362</td>\n",
       "      <td>1546549696</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>42.247950</td>\n",
       "      <td>-88.000360</td>\n",
       "      <td>60060</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-03 21:08:16+00:00</td>\n",
       "      <td>1546549696</td>\n",
       "      <td>1546549696</td>\n",
       "      <td>2019-01-03 21:08:16+00:00</td>\n",
       "      <td>2019-01-03 21:08:16+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2362</td>\n",
       "      <td>1546549697</td>\n",
       "      <td>61</td>\n",
       "      <td>3</td>\n",
       "      <td>42.247810</td>\n",
       "      <td>-88.000450</td>\n",
       "      <td>60060</td>\n",
       "      <td>IL</td>\n",
       "      <td>t1</td>\n",
       "      <td>2019-01-03 21:08:17+00:00</td>\n",
       "      <td>1546549697</td>\n",
       "      <td>1546549758</td>\n",
       "      <td>2019-01-03 21:08:17+00:00</td>\n",
       "      <td>2019-01-03 21:09:18+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64275</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546566702</td>\n",
       "      <td>451</td>\n",
       "      <td>3</td>\n",
       "      <td>42.378600</td>\n",
       "      <td>-87.938230</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>t2</td>\n",
       "      <td>2019-01-04 01:51:42+00:00</td>\n",
       "      <td>1546566702</td>\n",
       "      <td>1546567153</td>\n",
       "      <td>2019-01-04 01:51:42+00:00</td>\n",
       "      <td>2019-01-04 01:59:13+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64276</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546567003</td>\n",
       "      <td>6068</td>\n",
       "      <td>8</td>\n",
       "      <td>42.378633</td>\n",
       "      <td>-87.938868</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-04 01:56:43+00:00</td>\n",
       "      <td>1546567003</td>\n",
       "      <td>1546573071</td>\n",
       "      <td>2019-01-04 01:56:43+00:00</td>\n",
       "      <td>2019-01-04 03:37:51+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64277</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546574048</td>\n",
       "      <td>4900</td>\n",
       "      <td>5</td>\n",
       "      <td>42.382926</td>\n",
       "      <td>-87.980864</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-04 03:54:08+00:00</td>\n",
       "      <td>1546574048</td>\n",
       "      <td>1546578948</td>\n",
       "      <td>2019-01-04 03:54:08+00:00</td>\n",
       "      <td>2019-01-04 05:15:48+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64278</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546582682</td>\n",
       "      <td>8195</td>\n",
       "      <td>5</td>\n",
       "      <td>42.382920</td>\n",
       "      <td>-87.980898</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-04 06:18:02+00:00</td>\n",
       "      <td>1546582682</td>\n",
       "      <td>1546590877</td>\n",
       "      <td>2019-01-04 06:18:02+00:00</td>\n",
       "      <td>2019-01-04 08:34:37+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64279</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546595857</td>\n",
       "      <td>2356</td>\n",
       "      <td>3</td>\n",
       "      <td>42.382933</td>\n",
       "      <td>-87.980940</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-04 09:57:37+00:00</td>\n",
       "      <td>1546595857</td>\n",
       "      <td>1546598213</td>\n",
       "      <td>2019-01-04 09:57:37+00:00</td>\n",
       "      <td>2019-01-04 10:36:53+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000000 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       device_key   unix_time  min_duration_seconds  observation_count  \\\n",
       "0            1188  1546378629                     0                  1   \n",
       "1            2048  1546353483                     0                  1   \n",
       "2            2048  1546538227                     0                  1   \n",
       "3            2362  1546549696                     0                  1   \n",
       "4            2362  1546549697                    61                  3   \n",
       "...           ...         ...                   ...                ...   \n",
       "64275    45822518  1546566702                   451                  3   \n",
       "64276    45822518  1546567003                  6068                  8   \n",
       "64277    45822518  1546574048                  4900                  5   \n",
       "64278    45822518  1546582682                  8195                  5   \n",
       "64279    45822518  1546595857                  2356                  3   \n",
       "\n",
       "        latitude  longitude zipcode_5 state_abbr cluster_type2  \\\n",
       "0      41.854000 -87.651000     60608         IL             v   \n",
       "1      41.840390 -87.783210     60402         IL             v   \n",
       "2      41.849730 -87.728900     60623         IL             v   \n",
       "3      42.247950 -88.000360     60060         IL             v   \n",
       "4      42.247810 -88.000450     60060         IL            t1   \n",
       "...          ...        ...       ...        ...           ...   \n",
       "64275  42.378600 -87.938230     60031         IL            t2   \n",
       "64276  42.378633 -87.938868     60031         IL             v   \n",
       "64277  42.382926 -87.980864     60031         IL             v   \n",
       "64278  42.382920 -87.980898     60031         IL             v   \n",
       "64279  42.382933 -87.980940     60031         IL             v   \n",
       "\n",
       "                       datetime    str_time    end_time  \\\n",
       "0     2019-01-01 21:37:09+00:00  1546378629  1546378629   \n",
       "1     2019-01-01 14:38:03+00:00  1546353483  1546353483   \n",
       "2     2019-01-03 17:57:07+00:00  1546538227  1546538227   \n",
       "3     2019-01-03 21:08:16+00:00  1546549696  1546549696   \n",
       "4     2019-01-03 21:08:17+00:00  1546549697  1546549758   \n",
       "...                         ...         ...         ...   \n",
       "64275 2019-01-04 01:51:42+00:00  1546566702  1546567153   \n",
       "64276 2019-01-04 01:56:43+00:00  1546567003  1546573071   \n",
       "64277 2019-01-04 03:54:08+00:00  1546574048  1546578948   \n",
       "64278 2019-01-04 06:18:02+00:00  1546582682  1546590877   \n",
       "64279 2019-01-04 09:57:37+00:00  1546595857  1546598213   \n",
       "\n",
       "              datetime_str_time         datetime_end_time  \n",
       "0     2019-01-01 21:37:09+00:00 2019-01-01 21:37:09+00:00  \n",
       "1     2019-01-01 14:38:03+00:00 2019-01-01 14:38:03+00:00  \n",
       "2     2019-01-03 17:57:07+00:00 2019-01-03 17:57:07+00:00  \n",
       "3     2019-01-03 21:08:16+00:00 2019-01-03 21:08:16+00:00  \n",
       "4     2019-01-03 21:08:17+00:00 2019-01-03 21:09:18+00:00  \n",
       "...                         ...                       ...  \n",
       "64275 2019-01-04 01:51:42+00:00 2019-01-04 01:59:13+00:00  \n",
       "64276 2019-01-04 01:56:43+00:00 2019-01-04 03:37:51+00:00  \n",
       "64277 2019-01-04 03:54:08+00:00 2019-01-04 05:15:48+00:00  \n",
       "64278 2019-01-04 06:18:02+00:00 2019-01-04 08:34:37+00:00  \n",
       "64279 2019-01-04 09:57:37+00:00 2019-01-04 10:36:53+00:00  \n",
       "\n",
       "[1000000 rows x 14 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>device_key</th>\n",
       "      <th>unix_time</th>\n",
       "      <th>min_duration_seconds</th>\n",
       "      <th>observation_count</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>zipcode_5</th>\n",
       "      <th>state_abbr</th>\n",
       "      <th>cluster_type2</th>\n",
       "      <th>datetime</th>\n",
       "      <th>str_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>datetime_str_time</th>\n",
       "      <th>datetime_end_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1188</td>\n",
       "      <td>1546378629</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41.854000</td>\n",
       "      <td>-87.651000</td>\n",
       "      <td>60608</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-01 21:37:09+00:00</td>\n",
       "      <td>1546378629</td>\n",
       "      <td>1546378629</td>\n",
       "      <td>2019-01-01 21:37:09+00:00</td>\n",
       "      <td>2019-01-01 21:37:09+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2048</td>\n",
       "      <td>1546353483</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41.840390</td>\n",
       "      <td>-87.783210</td>\n",
       "      <td>60402</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-01 14:38:03+00:00</td>\n",
       "      <td>1546353483</td>\n",
       "      <td>1546353483</td>\n",
       "      <td>2019-01-01 14:38:03+00:00</td>\n",
       "      <td>2019-01-01 14:38:03+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2048</td>\n",
       "      <td>1546538227</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41.849730</td>\n",
       "      <td>-87.728900</td>\n",
       "      <td>60623</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-03 17:57:07+00:00</td>\n",
       "      <td>1546538227</td>\n",
       "      <td>1546538227</td>\n",
       "      <td>2019-01-03 17:57:07+00:00</td>\n",
       "      <td>2019-01-03 17:57:07+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2362</td>\n",
       "      <td>1546549696</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>42.247950</td>\n",
       "      <td>-88.000360</td>\n",
       "      <td>60060</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-03 21:08:16+00:00</td>\n",
       "      <td>1546549696</td>\n",
       "      <td>1546549696</td>\n",
       "      <td>2019-01-03 21:08:16+00:00</td>\n",
       "      <td>2019-01-03 21:08:16+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2362</td>\n",
       "      <td>1546549697</td>\n",
       "      <td>61</td>\n",
       "      <td>3</td>\n",
       "      <td>42.247810</td>\n",
       "      <td>-88.000450</td>\n",
       "      <td>60060</td>\n",
       "      <td>IL</td>\n",
       "      <td>t1</td>\n",
       "      <td>2019-01-03 21:08:17+00:00</td>\n",
       "      <td>1546549697</td>\n",
       "      <td>1546549758</td>\n",
       "      <td>2019-01-03 21:08:17+00:00</td>\n",
       "      <td>2019-01-03 21:09:18+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64275</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546566702</td>\n",
       "      <td>451</td>\n",
       "      <td>3</td>\n",
       "      <td>42.378600</td>\n",
       "      <td>-87.938230</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>t2</td>\n",
       "      <td>2019-01-04 01:51:42+00:00</td>\n",
       "      <td>1546566702</td>\n",
       "      <td>1546567153</td>\n",
       "      <td>2019-01-04 01:51:42+00:00</td>\n",
       "      <td>2019-01-04 01:59:13+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64276</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546567003</td>\n",
       "      <td>6068</td>\n",
       "      <td>8</td>\n",
       "      <td>42.378633</td>\n",
       "      <td>-87.938868</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-04 01:56:43+00:00</td>\n",
       "      <td>1546567003</td>\n",
       "      <td>1546573071</td>\n",
       "      <td>2019-01-04 01:56:43+00:00</td>\n",
       "      <td>2019-01-04 03:37:51+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64277</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546574048</td>\n",
       "      <td>4900</td>\n",
       "      <td>5</td>\n",
       "      <td>42.382926</td>\n",
       "      <td>-87.980864</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-04 03:54:08+00:00</td>\n",
       "      <td>1546574048</td>\n",
       "      <td>1546578948</td>\n",
       "      <td>2019-01-04 03:54:08+00:00</td>\n",
       "      <td>2019-01-04 05:15:48+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64278</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546582682</td>\n",
       "      <td>8195</td>\n",
       "      <td>5</td>\n",
       "      <td>42.382920</td>\n",
       "      <td>-87.980898</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-04 06:18:02+00:00</td>\n",
       "      <td>1546582682</td>\n",
       "      <td>1546590877</td>\n",
       "      <td>2019-01-04 06:18:02+00:00</td>\n",
       "      <td>2019-01-04 08:34:37+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64279</td>\n",
       "      <td>45822518</td>\n",
       "      <td>1546595857</td>\n",
       "      <td>2356</td>\n",
       "      <td>3</td>\n",
       "      <td>42.382933</td>\n",
       "      <td>-87.980940</td>\n",
       "      <td>60031</td>\n",
       "      <td>IL</td>\n",
       "      <td>v</td>\n",
       "      <td>2019-01-04 09:57:37+00:00</td>\n",
       "      <td>1546595857</td>\n",
       "      <td>1546598213</td>\n",
       "      <td>2019-01-04 09:57:37+00:00</td>\n",
       "      <td>2019-01-04 10:36:53+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>617885 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       device_key   unix_time  min_duration_seconds  observation_count  \\\n",
       "0            1188  1546378629                     0                  1   \n",
       "1            2048  1546353483                     0                  1   \n",
       "2            2048  1546538227                     0                  1   \n",
       "3            2362  1546549696                     0                  1   \n",
       "4            2362  1546549697                    61                  3   \n",
       "...           ...         ...                   ...                ...   \n",
       "64275    45822518  1546566702                   451                  3   \n",
       "64276    45822518  1546567003                  6068                  8   \n",
       "64277    45822518  1546574048                  4900                  5   \n",
       "64278    45822518  1546582682                  8195                  5   \n",
       "64279    45822518  1546595857                  2356                  3   \n",
       "\n",
       "        latitude  longitude zipcode_5 state_abbr cluster_type2  \\\n",
       "0      41.854000 -87.651000     60608         IL             v   \n",
       "1      41.840390 -87.783210     60402         IL             v   \n",
       "2      41.849730 -87.728900     60623         IL             v   \n",
       "3      42.247950 -88.000360     60060         IL             v   \n",
       "4      42.247810 -88.000450     60060         IL            t1   \n",
       "...          ...        ...       ...        ...           ...   \n",
       "64275  42.378600 -87.938230     60031         IL            t2   \n",
       "64276  42.378633 -87.938868     60031         IL             v   \n",
       "64277  42.382926 -87.980864     60031         IL             v   \n",
       "64278  42.382920 -87.980898     60031         IL             v   \n",
       "64279  42.382933 -87.980940     60031         IL             v   \n",
       "\n",
       "                       datetime    str_time    end_time  \\\n",
       "0     2019-01-01 21:37:09+00:00  1546378629  1546378629   \n",
       "1     2019-01-01 14:38:03+00:00  1546353483  1546353483   \n",
       "2     2019-01-03 17:57:07+00:00  1546538227  1546538227   \n",
       "3     2019-01-03 21:08:16+00:00  1546549696  1546549696   \n",
       "4     2019-01-03 21:08:17+00:00  1546549697  1546549758   \n",
       "...                         ...         ...         ...   \n",
       "64275 2019-01-04 01:51:42+00:00  1546566702  1546567153   \n",
       "64276 2019-01-04 01:56:43+00:00  1546567003  1546573071   \n",
       "64277 2019-01-04 03:54:08+00:00  1546574048  1546578948   \n",
       "64278 2019-01-04 06:18:02+00:00  1546582682  1546590877   \n",
       "64279 2019-01-04 09:57:37+00:00  1546595857  1546598213   \n",
       "\n",
       "              datetime_str_time         datetime_end_time  \n",
       "0     2019-01-01 21:37:09+00:00 2019-01-01 21:37:09+00:00  \n",
       "1     2019-01-01 14:38:03+00:00 2019-01-01 14:38:03+00:00  \n",
       "2     2019-01-03 17:57:07+00:00 2019-01-03 17:57:07+00:00  \n",
       "3     2019-01-03 21:08:16+00:00 2019-01-03 21:08:16+00:00  \n",
       "4     2019-01-03 21:08:17+00:00 2019-01-03 21:09:18+00:00  \n",
       "...                         ...                       ...  \n",
       "64275 2019-01-04 01:51:42+00:00 2019-01-04 01:59:13+00:00  \n",
       "64276 2019-01-04 01:56:43+00:00 2019-01-04 03:37:51+00:00  \n",
       "64277 2019-01-04 03:54:08+00:00 2019-01-04 05:15:48+00:00  \n",
       "64278 2019-01-04 06:18:02+00:00 2019-01-04 08:34:37+00:00  \n",
       "64279 2019-01-04 09:57:37+00:00 2019-01-04 10:36:53+00:00  \n",
       "\n",
       "[617885 rows x 14 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop_duplicates(subset=['device_key','longitude','latitude'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf = df.head(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unix_time</th>\n",
       "      <th>device_key</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>min_duration_seconds</th>\n",
       "      <th>dupl_idx</th>\n",
       "      <th>str_time</th>\n",
       "      <th>end_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1607897553</td>\n",
       "      <td>552</td>\n",
       "      <td>66.095531</td>\n",
       "      <td>-80.487888</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897553</td>\n",
       "      <td>1607897554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1607897554</td>\n",
       "      <td>552</td>\n",
       "      <td>56.304469</td>\n",
       "      <td>-89.771636</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897554</td>\n",
       "      <td>1607897560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1607897555</td>\n",
       "      <td>552</td>\n",
       "      <td>69.680385</td>\n",
       "      <td>-97.546706</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897555</td>\n",
       "      <td>1607897557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1607897556</td>\n",
       "      <td>437</td>\n",
       "      <td>46.255378</td>\n",
       "      <td>-89.170995</td>\n",
       "      <td>7</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897556</td>\n",
       "      <td>1607897563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1607897557</td>\n",
       "      <td>437</td>\n",
       "      <td>57.704822</td>\n",
       "      <td>-92.932916</td>\n",
       "      <td>11</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897557</td>\n",
       "      <td>1607897568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>218</td>\n",
       "      <td>1607897633</td>\n",
       "      <td>681</td>\n",
       "      <td>40.293148</td>\n",
       "      <td>-84.435284</td>\n",
       "      <td>20</td>\n",
       "      <td>66</td>\n",
       "      <td>1607897622</td>\n",
       "      <td>1607897642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>219</td>\n",
       "      <td>1607897633</td>\n",
       "      <td>584</td>\n",
       "      <td>53.360444</td>\n",
       "      <td>-90.539179</td>\n",
       "      <td>3</td>\n",
       "      <td>68</td>\n",
       "      <td>1607897622</td>\n",
       "      <td>1607897625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220</td>\n",
       "      <td>1607897629</td>\n",
       "      <td>740</td>\n",
       "      <td>53.360444</td>\n",
       "      <td>-90.539180</td>\n",
       "      <td>1</td>\n",
       "      <td>68</td>\n",
       "      <td>1607897623</td>\n",
       "      <td>1607897624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>221</td>\n",
       "      <td>1607897643</td>\n",
       "      <td>162</td>\n",
       "      <td>53.360444</td>\n",
       "      <td>-90.539179</td>\n",
       "      <td>7</td>\n",
       "      <td>68</td>\n",
       "      <td>1607897624</td>\n",
       "      <td>1607897631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>222</td>\n",
       "      <td>1607897634</td>\n",
       "      <td>921</td>\n",
       "      <td>53.360444</td>\n",
       "      <td>-90.539179</td>\n",
       "      <td>4</td>\n",
       "      <td>68</td>\n",
       "      <td>1607897625</td>\n",
       "      <td>1607897629</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>223 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      unix_time device_key   latitude  longitude min_duration_seconds  \\\n",
       "0    1607897553        552  66.095531 -80.487888                    1   \n",
       "1    1607897554        552  56.304469 -89.771636                    6   \n",
       "2    1607897555        552  69.680385 -97.546706                    2   \n",
       "3    1607897556        437  46.255378 -89.170995                    7   \n",
       "4    1607897557        437  57.704822 -92.932916                   11   \n",
       "..          ...        ...        ...        ...                  ...   \n",
       "218  1607897633        681  40.293148 -84.435284                   20   \n",
       "219  1607897633        584  53.360444 -90.539179                    3   \n",
       "220  1607897629        740  53.360444 -90.539180                    1   \n",
       "221  1607897643        162  53.360444 -90.539179                    7   \n",
       "222  1607897634        921  53.360444 -90.539179                    4   \n",
       "\n",
       "    dupl_idx    str_time    end_time  \n",
       "0      False  1607897553  1607897554  \n",
       "1      False  1607897554  1607897560  \n",
       "2      False  1607897555  1607897557  \n",
       "3      False  1607897556  1607897563  \n",
       "4      False  1607897557  1607897568  \n",
       "..       ...         ...         ...  \n",
       "218       66  1607897622  1607897642  \n",
       "219       68  1607897622  1607897625  \n",
       "220       68  1607897623  1607897624  \n",
       "221       68  1607897624  1607897631  \n",
       "222       68  1607897625  1607897629  \n",
       "\n",
       "[223 rows x 8 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_sample_data(n=20):\n",
    "    df = pd.DataFrame( columns=['unix_time','device_key','latitude','longitude','min_duration_seconds','dupl_idx','str_time','end_time'])\n",
    "    t = 1607897552\n",
    "    for i in range(n): \n",
    "        key=random.randint(100,999)\n",
    "        lat=random.uniform(40,70)\n",
    "        long=random.uniform(-80,-100)\n",
    "        for j in range(random.randint(2,6)):\n",
    "            t += 1\n",
    "            d = random.randint(0,24)\n",
    "            df = df.append({\n",
    "                        'unix_time': t,\n",
    "                        'device_key':str(key),\n",
    "                        'latitude':random.uniform(40,70)  ,\n",
    "                        'longitude':random.uniform(-80,-100),\n",
    "                        'min_duration_seconds': d,\n",
    "                        'str_time': t,\n",
    "                        'end_time': t + d,\n",
    "                        'dupl_idx':\"False\"},\n",
    "                        ignore_index=True)   \n",
    "    keys = df['device_key'].tolist()\n",
    "    for index, row in df.iterrows():\n",
    "        if(random.uniform()>0.5):\n",
    "            t = row['unix_time']\n",
    "            for _ in range(random.randint(2,6)):\n",
    "                t += 1\n",
    "                d = random.randint(0,24)\n",
    "                df = df.append({\n",
    "                    'unix_time': t + random.randint(0,20),\n",
    "                    'device_key':random.choice(keys),\n",
    "                    'latitude': row['latitude']+ random.random()*0.000001  ,\n",
    "                    'longitude': row['longitude'] + random.random()*0.000001,\n",
    "                    'min_duration_seconds' : d,\n",
    "                    'str_time': t,\n",
    "                    'end_time': t + d,\n",
    "                    'dupl_idx': index },\n",
    "                    ignore_index=True) \n",
    "    return df\n",
    "    \n",
    "df = get_sample_data(20)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\aishw\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:2: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "ndf = df\n",
    "coords = ndf.as_matrix(columns=['latitude', 'longitude'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 66.09553125, -80.48788822],\n",
       "       [ 56.30446898, -89.77163621],\n",
       "       [ 69.6803848 , -97.54670568],\n",
       "       [ 46.25537765, -89.17099479],\n",
       "       [ 57.7048223 , -92.93291622],\n",
       "       [ 53.97979522, -86.60986612],\n",
       "       [ 46.93993497, -97.42480113],\n",
       "       [ 58.80334591, -88.42871932],\n",
       "       [ 68.16428759, -86.91395648],\n",
       "       [ 48.31701066, -91.44721127],\n",
       "       [ 68.6655799 , -89.24382312],\n",
       "       [ 49.36116647, -97.43664811],\n",
       "       [ 69.63185989, -98.95519125],\n",
       "       [ 40.37371351, -85.24471736],\n",
       "       [ 64.97421498, -87.19161612],\n",
       "       [ 55.76750312, -91.53029756],\n",
       "       [ 60.12897147, -96.7723957 ],\n",
       "       [ 68.77728485, -87.53190832],\n",
       "       [ 47.40928549, -93.10841229],\n",
       "       [ 54.42846679, -92.29046507],\n",
       "       [ 61.32159735, -82.40397324],\n",
       "       [ 47.42396618, -82.67853211],\n",
       "       [ 59.84921269, -94.79552406],\n",
       "       [ 61.7472398 , -89.77313045],\n",
       "       [ 65.95126367, -97.66388154],\n",
       "       [ 52.12320987, -86.79931735],\n",
       "       [ 63.4026671 , -83.23579591],\n",
       "       [ 61.70797963, -93.29999873],\n",
       "       [ 50.03839243, -82.89858857],\n",
       "       [ 55.51043578, -86.24812992],\n",
       "       [ 41.09478404, -94.94034312],\n",
       "       [ 56.43125923, -91.59615306],\n",
       "       [ 50.35422239, -90.48667524],\n",
       "       [ 41.23806117, -94.57808446],\n",
       "       [ 51.62378602, -90.67784072],\n",
       "       [ 58.16111667, -93.76152467],\n",
       "       [ 50.94273858, -82.5407153 ],\n",
       "       [ 52.8966529 , -90.60439045],\n",
       "       [ 52.03840593, -92.44749217],\n",
       "       [ 46.03590603, -88.69756561],\n",
       "       [ 57.52301852, -95.66970359],\n",
       "       [ 40.99703197, -89.43819774],\n",
       "       [ 61.43774564, -89.35503472],\n",
       "       [ 53.34347724, -89.43821059],\n",
       "       [ 67.80681706, -81.74795708],\n",
       "       [ 43.93047365, -94.99375723],\n",
       "       [ 63.99819508, -92.50069561],\n",
       "       [ 60.47891007, -95.00992338],\n",
       "       [ 69.95068585, -92.199104  ],\n",
       "       [ 60.36427271, -92.87232911],\n",
       "       [ 45.42386657, -86.2666786 ],\n",
       "       [ 47.24875716, -99.92821621],\n",
       "       [ 56.65877412, -82.79695754],\n",
       "       [ 58.15637205, -83.50714178],\n",
       "       [ 44.641682  , -86.17574552],\n",
       "       [ 61.34832178, -83.47297409],\n",
       "       [ 68.20498546, -87.04281843],\n",
       "       [ 69.24235288, -81.12528618],\n",
       "       [ 65.79505833, -85.82569751],\n",
       "       [ 63.40564407, -84.09810712],\n",
       "       [ 59.27923761, -93.26799013],\n",
       "       [ 67.40142626, -91.44779817],\n",
       "       [ 60.58422413, -80.7676253 ],\n",
       "       [ 68.79452935, -93.37671949],\n",
       "       [ 41.76390708, -82.30578658],\n",
       "       [ 54.34634197, -88.34481905],\n",
       "       [ 40.29314712, -84.4352849 ],\n",
       "       [ 57.00968316, -82.37605953],\n",
       "       [ 53.36044358, -90.53917977],\n",
       "       [ 66.09553193, -80.48788747],\n",
       "       [ 66.09553172, -80.48788761],\n",
       "       [ 66.09553142, -80.48788817],\n",
       "       [ 56.30446907, -89.77163562],\n",
       "       [ 56.30446993, -89.77163604],\n",
       "       [ 46.25537818, -89.17099438],\n",
       "       [ 46.25537776, -89.17099432],\n",
       "       [ 46.25537829, -89.17099428],\n",
       "       [ 46.25537858, -89.17099448],\n",
       "       [ 46.25537822, -89.17099436],\n",
       "       [ 46.93993576, -97.42480024],\n",
       "       [ 46.93993543, -97.424801  ],\n",
       "       [ 46.93993538, -97.42480029],\n",
       "       [ 46.93993563, -97.42480091],\n",
       "       [ 48.31701079, -91.44721092],\n",
       "       [ 48.31701155, -91.44721096],\n",
       "       [ 48.31701125, -91.44721065],\n",
       "       [ 48.31701126, -91.44721096],\n",
       "       [ 68.66558034, -89.2438231 ],\n",
       "       [ 68.66558081, -89.24382268],\n",
       "       [ 49.36116734, -97.43664746],\n",
       "       [ 49.36116647, -97.43664734],\n",
       "       [ 69.63186031, -98.95519114],\n",
       "       [ 69.63186074, -98.95519111],\n",
       "       [ 69.63186078, -98.95519111],\n",
       "       [ 69.63186   , -98.95519047],\n",
       "       [ 55.76750328, -91.5302967 ],\n",
       "       [ 55.76750352, -91.53029704],\n",
       "       [ 55.76750372, -91.53029752],\n",
       "       [ 60.12897164, -96.77239532],\n",
       "       [ 60.12897184, -96.77239567],\n",
       "       [ 60.12897211, -96.77239474],\n",
       "       [ 60.1289715 , -96.77239482],\n",
       "       [ 60.12897237, -96.77239475],\n",
       "       [ 68.77728561, -87.5319079 ],\n",
       "       [ 68.77728582, -87.53190785],\n",
       "       [ 68.77728542, -87.5319076 ],\n",
       "       [ 47.40928551, -93.10841172],\n",
       "       [ 47.4092857 , -93.10841187],\n",
       "       [ 47.40928604, -93.10841133],\n",
       "       [ 47.40928611, -93.10841178],\n",
       "       [ 54.42846706, -92.29046453],\n",
       "       [ 54.42846743, -92.2904648 ],\n",
       "       [ 61.32159748, -82.40397286],\n",
       "       [ 61.32159827, -82.4039727 ],\n",
       "       [ 47.42396656, -82.67853183],\n",
       "       [ 47.4239665 , -82.67853173],\n",
       "       [ 47.42396688, -82.67853176],\n",
       "       [ 59.84921363, -94.79552339],\n",
       "       [ 59.84921347, -94.79552317],\n",
       "       [ 61.74724047, -89.77313011],\n",
       "       [ 61.74724007, -89.77312982],\n",
       "       [ 61.74724012, -89.77313034],\n",
       "       [ 65.95126405, -97.66388131],\n",
       "       [ 65.9512645 , -97.6638807 ],\n",
       "       [ 52.12321052, -86.79931712],\n",
       "       [ 52.12321063, -86.79931728],\n",
       "       [ 52.12321041, -86.79931658],\n",
       "       [ 52.1232103 , -86.79931644],\n",
       "       [ 63.40266722, -83.23579575],\n",
       "       [ 63.40266754, -83.23579557],\n",
       "       [ 63.40266713, -83.23579538],\n",
       "       [ 63.40266786, -83.23579548],\n",
       "       [ 63.40266731, -83.23579496],\n",
       "       [ 61.70798057, -93.29999801],\n",
       "       [ 61.70798009, -93.29999821],\n",
       "       [ 61.70797991, -93.299998  ],\n",
       "       [ 61.70797996, -93.29999855],\n",
       "       [ 61.70798025, -93.29999868],\n",
       "       [ 41.09478502, -94.9403424 ],\n",
       "       [ 41.09478453, -94.94034234],\n",
       "       [ 41.09478453, -94.94034254],\n",
       "       [ 56.43126008, -91.59615303],\n",
       "       [ 56.43125939, -91.59615222],\n",
       "       [ 56.43125955, -91.59615288],\n",
       "       [ 41.23806175, -94.57808391],\n",
       "       [ 41.23806175, -94.57808369],\n",
       "       [ 41.23806195, -94.57808357],\n",
       "       [ 41.23806212, -94.57808425],\n",
       "       [ 41.238062  , -94.57808384],\n",
       "       [ 51.62378617, -90.67784064],\n",
       "       [ 51.6237865 , -90.67783985],\n",
       "       [ 58.16111726, -93.76152394],\n",
       "       [ 58.16111712, -93.76152367],\n",
       "       [ 50.94273923, -82.54071491],\n",
       "       [ 50.9427386 , -82.54071433],\n",
       "       [ 52.03840621, -92.44749121],\n",
       "       [ 52.03840687, -92.44749157],\n",
       "       [ 46.03590634, -88.69756469],\n",
       "       [ 46.03590665, -88.69756469],\n",
       "       [ 46.03590643, -88.69756464],\n",
       "       [ 40.99703288, -89.43819759],\n",
       "       [ 40.99703291, -89.43819708],\n",
       "       [ 61.43774624, -89.3550339 ],\n",
       "       [ 61.4377457 , -89.35503461],\n",
       "       [ 43.93047407, -94.99375648],\n",
       "       [ 43.93047418, -94.9937569 ],\n",
       "       [ 43.9304744 , -94.99375673],\n",
       "       [ 43.93047433, -94.99375682],\n",
       "       [ 43.93047399, -94.99375719],\n",
       "       [ 63.99819526, -92.50069507],\n",
       "       [ 63.99819565, -92.5006952 ],\n",
       "       [ 69.95068656, -92.19910324],\n",
       "       [ 69.95068666, -92.19910339],\n",
       "       [ 69.95068668, -92.19910333],\n",
       "       [ 69.95068646, -92.19910331],\n",
       "       [ 69.95068622, -92.19910374],\n",
       "       [ 60.3642731 , -92.87232868],\n",
       "       [ 60.36427299, -92.87232878],\n",
       "       [ 60.36427301, -92.87232909],\n",
       "       [ 45.42386734, -86.26667823],\n",
       "       [ 45.42386659, -86.2666777 ],\n",
       "       [ 47.24875731, -99.92821618],\n",
       "       [ 47.24875751, -99.92821528],\n",
       "       [ 56.65877441, -82.79695656],\n",
       "       [ 56.65877508, -82.79695688],\n",
       "       [ 56.65877458, -82.79695704],\n",
       "       [ 58.15637292, -83.50714083],\n",
       "       [ 58.1563722 , -83.50714091],\n",
       "       [ 58.15637284, -83.50714081],\n",
       "       [ 58.15637291, -83.50714139],\n",
       "       [ 44.64168231, -86.17574486],\n",
       "       [ 44.64168258, -86.17574529],\n",
       "       [ 44.64168261, -86.17574467],\n",
       "       [ 61.34832252, -83.47297349],\n",
       "       [ 61.34832226, -83.47297327],\n",
       "       [ 61.3483222 , -83.47297362],\n",
       "       [ 61.3483227 , -83.47297342],\n",
       "       [ 61.3483225 , -83.4729734 ],\n",
       "       [ 68.2049857 , -87.04281839],\n",
       "       [ 68.2049857 , -87.04281811],\n",
       "       [ 69.24235315, -81.12528523],\n",
       "       [ 69.24235353, -81.12528597],\n",
       "       [ 69.24235333, -81.12528576],\n",
       "       [ 69.2423536 , -81.12528605],\n",
       "       [ 69.24235335, -81.12528535],\n",
       "       [ 63.40564409, -84.09810646],\n",
       "       [ 63.40564418, -84.09810671],\n",
       "       [ 63.40564439, -84.09810711],\n",
       "       [ 63.40564412, -84.09810702],\n",
       "       [ 60.58422471, -80.76762432],\n",
       "       [ 60.5842246 , -80.76762509],\n",
       "       [ 60.58422486, -80.76762446],\n",
       "       [ 68.79452973, -93.37671862],\n",
       "       [ 68.79452963, -93.37671858],\n",
       "       [ 41.76390789, -82.305786  ],\n",
       "       [ 41.76390792, -82.30578639],\n",
       "       [ 40.29314747, -84.4352848 ],\n",
       "       [ 40.29314779, -84.43528485],\n",
       "       [ 40.29314774, -84.43528431],\n",
       "       [ 53.36044397, -90.53917907],\n",
       "       [ 53.36044432, -90.53917976],\n",
       "       [ 53.36044428, -90.53917885],\n",
       "       [ 53.36044384, -90.53917948]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of clusters: 50\n"
     ]
    }
   ],
   "source": [
    "kms_per_radian = 6371.0088\n",
    "contact_radius = 0.001\n",
    "min_samples = 3\n",
    "epsilon = contact_radius / kms_per_radian\n",
    "db = DBSCAN(eps=epsilon, min_samples=min_samples, algorithm='ball_tree', metric='haversine').fit(np.radians(coords))\n",
    "cluster_labels = db.labels_\n",
    "num_clusters = len(set(cluster_labels))\n",
    "clusters = pd.Series([coords[cluster_labels == n] for n in range(num_clusters)])\n",
    "print('Number of clusters: {}'.format(num_clusters))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1, -1,  2, -1, -1,  3, -1, -1,  4,  5,  6,  7, -1, -1,  8,  9,\n",
       "       10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -1, 21, 22, -1, 23,\n",
       "       24, 25, 26, -1, 27, 28, -1, 29, 30, -1, -1, 31, 32, -1, 33, 34, 35,\n",
       "       36, 37, 38, 39, 40, 41, 42, -1, 43, -1, -1, 44, 45, 46, -1, 47, -1,\n",
       "       48,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,\n",
       "        4,  4,  5,  5,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9,\n",
       "        9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15,\n",
       "       16, 16, 16, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20,\n",
       "       20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 25, 25,\n",
       "       26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 31, 31, 31, 32,\n",
       "       32, 33, 33, 33, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 37, 37, 38,\n",
       "       38, 38, 38, 39, 39, 39, 40, 40, 40, 40, 40, 41, 41, 42, 42, 42, 42,\n",
       "       42, 43, 43, 43, 43, 44, 44, 44, 45, 45, 46, 46, 47, 47, 47, 48, 48,\n",
       "       48, 48], dtype=int64)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_centermost_point(cluster):\n",
    "    centermost_point = None\n",
    "    if len(cluster) != 0:\n",
    "        centroid = (MultiPoint(cluster).centroid.x, MultiPoint(cluster).centroid.y)\n",
    "        centermost_point = min(cluster, key=lambda point: great_circle(point, centroid).m)\n",
    "    return tuple(centermost_point)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "clusters = clusters[clusters.str.len() != 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ignored points :  20\n"
     ]
    }
   ],
   "source": [
    "print(\"Ignored points : \" ,len(coords) - clusters.map(len).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       (66.09553172283826, -80.4878876075996)\n",
       "1     (56.304469071887915, -89.77163561768762)\n",
       "2     (46.255378176734034, -89.17099438254341)\n",
       "3      (46.93993542758146, -97.42480099789199)\n",
       "4      (48.31701125657953, -91.44721096348718)\n",
       "5      (68.66558033811735, -89.24382310178802)\n",
       "6      (49.36116647344525, -97.43664734065246)\n",
       "7      (69.63186031046108, -98.95519113965598)\n",
       "8      (55.767503522194744, -91.5302970389868)\n",
       "9      (60.12897164446742, -96.77239532300759)\n",
       "10     (68.77728541614283, -87.53190760100082)\n",
       "11    (47.409285702031305, -93.10841187456285)\n",
       "12    (54.428467056867376, -92.29046453145318)\n",
       "13     (61.32159747775052, -82.40397285736395)\n",
       "14      (47.4239665623309, -82.67853182946742)\n",
       "15    (59.849213465066335, -94.79552317195801)\n",
       "16      (61.7472401160439, -89.77313033779527)\n",
       "17      (65.95126405147884, -97.6638813125745)\n",
       "18      (52.1232105181419, -86.79931711581015)\n",
       "19     (63.40266722217419, -83.23579574874222)\n",
       "20     (61.70798009223388, -93.29999820532227)\n",
       "21    (41.094784532023525, -94.94034253745325)\n",
       "22    (56.431259553954604, -91.59615288416961)\n",
       "23     (41.23806174851957, -94.57808390532026)\n",
       "24      (51.6237861713364, -90.67784063851128)\n",
       "25     (58.16111711920709, -93.76152367499404)\n",
       "26     (50.94273858146038, -82.54071530303726)\n",
       "27    (52.038406206850794, -92.44749120788266)\n",
       "28     (46.03590633794431, -88.69756469383536)\n",
       "29    (40.997032878772615, -89.43819758512402)\n",
       "30     (61.43774570238468, -89.35503460867507)\n",
       "31     (43.93047418483923, -94.99375689950682)\n",
       "32     (63.99819525904699, -92.50069507239753)\n",
       "33     (69.95068645684479, -92.19910331448538)\n",
       "34     (60.36427298960058, -92.87232877888373)\n",
       "35     (45.42386656596203, -86.26667860334652)\n",
       "36     (47.24875731120662, -99.92821618248453)\n",
       "37    (56.658774584685645, -82.79695703678225)\n",
       "38     (58.15637283570234, -83.50714081089491)\n",
       "39    (44.641682310803176, -86.17574485953317)\n",
       "40     (61.34832219612504, -83.47297362429025)\n",
       "41     (68.20498569627173, -87.04281839413798)\n",
       "42     (69.24235333122424, -81.12528576203204)\n",
       "43     (63.40564418377133, -84.09810671155456)\n",
       "44    (60.584224601850174, -80.76762509225523)\n",
       "45     (68.79452962604965, -93.37671858031362)\n",
       "46    (41.763907923483025, -82.30578639365046)\n",
       "47    (40.293147474054294, -84.43528480269248)\n",
       "48     (53.36044383835253, -90.53917948001218)\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "centermost_points = clusters.map(get_centermost_point)\n",
    "centermost_points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       (66.09553172283826, -80.4878876075996)\n",
       "1     (56.304469071887915, -89.77163561768762)\n",
       "2     (46.255378176734034, -89.17099438254341)\n",
       "3      (46.93993542758146, -97.42480099789199)\n",
       "4      (48.31701125657953, -91.44721096348718)\n",
       "5      (68.66558033811735, -89.24382310178802)\n",
       "6      (49.36116647344525, -97.43664734065246)\n",
       "7      (69.63186031046108, -98.95519113965598)\n",
       "8      (55.767503522194744, -91.5302970389868)\n",
       "9      (60.12897164446742, -96.77239532300759)\n",
       "10     (68.77728541614283, -87.53190760100082)\n",
       "11    (47.409285702031305, -93.10841187456285)\n",
       "12    (54.428467056867376, -92.29046453145318)\n",
       "13     (61.32159747775052, -82.40397285736395)\n",
       "14      (47.4239665623309, -82.67853182946742)\n",
       "15    (59.849213465066335, -94.79552317195801)\n",
       "16      (61.7472401160439, -89.77313033779527)\n",
       "17      (65.95126405147884, -97.6638813125745)\n",
       "18      (52.1232105181419, -86.79931711581015)\n",
       "19     (63.40266722217419, -83.23579574874222)\n",
       "20     (61.70798009223388, -93.29999820532227)\n",
       "21    (41.094784532023525, -94.94034253745325)\n",
       "22    (56.431259553954604, -91.59615288416961)\n",
       "23     (41.23806174851957, -94.57808390532026)\n",
       "24      (51.6237861713364, -90.67784063851128)\n",
       "25     (58.16111711920709, -93.76152367499404)\n",
       "26     (50.94273858146038, -82.54071530303726)\n",
       "27    (52.038406206850794, -92.44749120788266)\n",
       "28     (46.03590633794431, -88.69756469383536)\n",
       "29    (40.997032878772615, -89.43819758512402)\n",
       "30     (61.43774570238468, -89.35503460867507)\n",
       "31     (43.93047418483923, -94.99375689950682)\n",
       "32     (63.99819525904699, -92.50069507239753)\n",
       "33     (69.95068645684479, -92.19910331448538)\n",
       "34     (60.36427298960058, -92.87232877888373)\n",
       "35     (45.42386656596203, -86.26667860334652)\n",
       "36     (47.24875731120662, -99.92821618248453)\n",
       "37    (56.658774584685645, -82.79695703678225)\n",
       "38     (58.15637283570234, -83.50714081089491)\n",
       "39    (44.641682310803176, -86.17574485953317)\n",
       "40     (61.34832219612504, -83.47297362429025)\n",
       "41     (68.20498569627173, -87.04281839413798)\n",
       "42     (69.24235333122424, -81.12528576203204)\n",
       "43     (63.40564418377133, -84.09810671155456)\n",
       "44    (60.584224601850174, -80.76762509225523)\n",
       "45     (68.79452962604965, -93.37671858031362)\n",
       "46    (41.763907923483025, -82.30578639365046)\n",
       "47    (40.293147474054294, -84.43528480269248)\n",
       "48     (53.36044383835253, -90.53917948001218)\n",
       "dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "centermost_points.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['552', '437', '606', '898', '177', '681', '987', '921', '740',\n",
       "       '584', '202', '931', '279', '162', '389', '386', '108', '291',\n",
       "       '742', '169'], dtype=object)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf['device_key'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nodes = ndf['device_key'].unique()\n",
    "len(nodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "G = nx.Graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unix_time</th>\n",
       "      <th>device_key</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>min_duration_seconds</th>\n",
       "      <th>dupl_idx</th>\n",
       "      <th>str_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>place_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1607897553</td>\n",
       "      <td>552</td>\n",
       "      <td>66.095531</td>\n",
       "      <td>-80.487888</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897553</td>\n",
       "      <td>1607897554</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1607897554</td>\n",
       "      <td>552</td>\n",
       "      <td>56.304469</td>\n",
       "      <td>-89.771636</td>\n",
       "      <td>6</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897554</td>\n",
       "      <td>1607897560</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1607897555</td>\n",
       "      <td>552</td>\n",
       "      <td>69.680385</td>\n",
       "      <td>-97.546706</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897555</td>\n",
       "      <td>1607897557</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1607897556</td>\n",
       "      <td>437</td>\n",
       "      <td>46.255378</td>\n",
       "      <td>-89.170995</td>\n",
       "      <td>7</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897556</td>\n",
       "      <td>1607897563</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1607897557</td>\n",
       "      <td>437</td>\n",
       "      <td>57.704822</td>\n",
       "      <td>-92.932916</td>\n",
       "      <td>11</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897557</td>\n",
       "      <td>1607897568</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>218</td>\n",
       "      <td>1607897633</td>\n",
       "      <td>681</td>\n",
       "      <td>40.293148</td>\n",
       "      <td>-84.435284</td>\n",
       "      <td>20</td>\n",
       "      <td>66</td>\n",
       "      <td>1607897622</td>\n",
       "      <td>1607897642</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>219</td>\n",
       "      <td>1607897633</td>\n",
       "      <td>584</td>\n",
       "      <td>53.360444</td>\n",
       "      <td>-90.539179</td>\n",
       "      <td>3</td>\n",
       "      <td>68</td>\n",
       "      <td>1607897622</td>\n",
       "      <td>1607897625</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220</td>\n",
       "      <td>1607897629</td>\n",
       "      <td>740</td>\n",
       "      <td>53.360444</td>\n",
       "      <td>-90.539180</td>\n",
       "      <td>1</td>\n",
       "      <td>68</td>\n",
       "      <td>1607897623</td>\n",
       "      <td>1607897624</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>221</td>\n",
       "      <td>1607897643</td>\n",
       "      <td>162</td>\n",
       "      <td>53.360444</td>\n",
       "      <td>-90.539179</td>\n",
       "      <td>7</td>\n",
       "      <td>68</td>\n",
       "      <td>1607897624</td>\n",
       "      <td>1607897631</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>222</td>\n",
       "      <td>1607897634</td>\n",
       "      <td>921</td>\n",
       "      <td>53.360444</td>\n",
       "      <td>-90.539179</td>\n",
       "      <td>4</td>\n",
       "      <td>68</td>\n",
       "      <td>1607897625</td>\n",
       "      <td>1607897629</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>223 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      unix_time device_key   latitude  longitude min_duration_seconds  \\\n",
       "0    1607897553        552  66.095531 -80.487888                    1   \n",
       "1    1607897554        552  56.304469 -89.771636                    6   \n",
       "2    1607897555        552  69.680385 -97.546706                    2   \n",
       "3    1607897556        437  46.255378 -89.170995                    7   \n",
       "4    1607897557        437  57.704822 -92.932916                   11   \n",
       "..          ...        ...        ...        ...                  ...   \n",
       "218  1607897633        681  40.293148 -84.435284                   20   \n",
       "219  1607897633        584  53.360444 -90.539179                    3   \n",
       "220  1607897629        740  53.360444 -90.539180                    1   \n",
       "221  1607897643        162  53.360444 -90.539179                    7   \n",
       "222  1607897634        921  53.360444 -90.539179                    4   \n",
       "\n",
       "    dupl_idx    str_time    end_time  place_id  \n",
       "0      False  1607897553  1607897554         0  \n",
       "1      False  1607897554  1607897560         1  \n",
       "2      False  1607897555  1607897557        -1  \n",
       "3      False  1607897556  1607897563         2  \n",
       "4      False  1607897557  1607897568        -1  \n",
       "..       ...         ...         ...       ...  \n",
       "218       66  1607897622  1607897642        47  \n",
       "219       68  1607897622  1607897625        48  \n",
       "220       68  1607897623  1607897624        48  \n",
       "221       68  1607897624  1607897631        48  \n",
       "222       68  1607897625  1607897629        48  \n",
       "\n",
       "[223 rows x 9 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['place_id'] = cluster_labels\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unix_time</th>\n",
       "      <th>device_key</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>min_duration_seconds</th>\n",
       "      <th>dupl_idx</th>\n",
       "      <th>str_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>place_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1607897556</td>\n",
       "      <td>437</td>\n",
       "      <td>46.255378</td>\n",
       "      <td>-89.170995</td>\n",
       "      <td>7</td>\n",
       "      <td>False</td>\n",
       "      <td>1607897556</td>\n",
       "      <td>1607897563</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>74</td>\n",
       "      <td>1607897567</td>\n",
       "      <td>202</td>\n",
       "      <td>46.255378</td>\n",
       "      <td>-89.170994</td>\n",
       "      <td>21</td>\n",
       "      <td>3</td>\n",
       "      <td>1607897557</td>\n",
       "      <td>1607897578</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75</td>\n",
       "      <td>1607897565</td>\n",
       "      <td>606</td>\n",
       "      <td>46.255378</td>\n",
       "      <td>-89.170994</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>1607897558</td>\n",
       "      <td>1607897565</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>76</td>\n",
       "      <td>1607897565</td>\n",
       "      <td>898</td>\n",
       "      <td>46.255378</td>\n",
       "      <td>-89.170994</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>1607897559</td>\n",
       "      <td>1607897567</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>77</td>\n",
       "      <td>1607897560</td>\n",
       "      <td>921</td>\n",
       "      <td>46.255379</td>\n",
       "      <td>-89.170994</td>\n",
       "      <td>23</td>\n",
       "      <td>3</td>\n",
       "      <td>1607897560</td>\n",
       "      <td>1607897583</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>78</td>\n",
       "      <td>1607897562</td>\n",
       "      <td>202</td>\n",
       "      <td>46.255378</td>\n",
       "      <td>-89.170994</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>1607897561</td>\n",
       "      <td>1607897574</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     unix_time device_key   latitude  longitude min_duration_seconds dupl_idx  \\\n",
       "3   1607897556        437  46.255378 -89.170995                    7    False   \n",
       "74  1607897567        202  46.255378 -89.170994                   21        3   \n",
       "75  1607897565        606  46.255378 -89.170994                    7        3   \n",
       "76  1607897565        898  46.255378 -89.170994                    8        3   \n",
       "77  1607897560        921  46.255379 -89.170994                   23        3   \n",
       "78  1607897562        202  46.255378 -89.170994                   13        3   \n",
       "\n",
       "      str_time    end_time  place_id  \n",
       "3   1607897556  1607897563         2  \n",
       "74  1607897557  1607897578         2  \n",
       "75  1607897558  1607897565         2  \n",
       "76  1607897559  1607897567         2  \n",
       "77  1607897560  1607897583         2  \n",
       "78  1607897561  1607897574         2  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.place_id == 2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_overlap(s1,e1,s2,e2):\n",
    "    return min(e1,e2) - max(s1,s2)\n",
    "\n",
    "overlap_threshold = 15\n",
    "device_keys = set(df[df.place_id == 2])\n",
    "df2 = df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "graphdf = pd.DataFrame(columns=['node1','node2','overlap','place_id',])\n",
    "\n",
    "# Conditional Self join is not possible in pandas \n",
    "for index1,row1 in df.iterrows():\n",
    "    for index2,row2 in df[(df.place_id == row1.place_id) & (df.index > index1) & (df.device_key != row1.device_key) ].iterrows():\n",
    "        overlap = min(row1.end_time,row2.end_time) - max(row1.str_time,row2.str_time)\n",
    "        if(overlap > overlap_threshold):\n",
    "            graphdf=graphdf.append({'node1':row1.device_key,'node2':row2.device_key,'overlap':overlap,'place_id':row2.place_id},ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node1</th>\n",
       "      <th>node2</th>\n",
       "      <th>overlap</th>\n",
       "      <th>place_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>987</td>\n",
       "      <td>584</td>\n",
       "      <td>18</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>921</td>\n",
       "      <td>740</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>921</td>\n",
       "      <td>742</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>921</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>740</td>\n",
       "      <td>931</td>\n",
       "      <td>22</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>740</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>386</td>\n",
       "      <td>291</td>\n",
       "      <td>19</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>291</td>\n",
       "      <td>389</td>\n",
       "      <td>19</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>202</td>\n",
       "      <td>921</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>740</td>\n",
       "      <td>742</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>740</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>742</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>921</td>\n",
       "      <td>681</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>921</td>\n",
       "      <td>386</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>108</td>\n",
       "      <td>291</td>\n",
       "      <td>18</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>108</td>\n",
       "      <td>177</td>\n",
       "      <td>16</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>291</td>\n",
       "      <td>177</td>\n",
       "      <td>16</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>740</td>\n",
       "      <td>177</td>\n",
       "      <td>20</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>931</td>\n",
       "      <td>987</td>\n",
       "      <td>20</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>931</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>987</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>108</td>\n",
       "      <td>437</td>\n",
       "      <td>21</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   node1 node2 overlap place_id\n",
       "0    987   584      18       11\n",
       "1    921   740      21       16\n",
       "2    921   742      19       16\n",
       "3    921   108      18       16\n",
       "4    740   931      22       19\n",
       "5    740   921      19       20\n",
       "6    386   291      19       39\n",
       "7    291   389      19       46\n",
       "8    202   921      18        2\n",
       "9    740   742      19       16\n",
       "10   740   108      18       16\n",
       "11   742   108      18       16\n",
       "12   921   681      16       18\n",
       "13   921   386      19       20\n",
       "14   108   291      18       21\n",
       "15   108   177      16       21\n",
       "16   291   177      16       21\n",
       "17   740   177      20       41\n",
       "18   931   987      20       42\n",
       "19   931   921      19       42\n",
       "20   987   921      19       42\n",
       "21   108   437      21       44"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graphdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "graphdf = graphdf.drop_duplicates(subset=['node1','node2','place_id'],keep='last')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node1</th>\n",
       "      <th>node2</th>\n",
       "      <th>overlap</th>\n",
       "      <th>place_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>987</td>\n",
       "      <td>584</td>\n",
       "      <td>18</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>921</td>\n",
       "      <td>740</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>921</td>\n",
       "      <td>742</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>921</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>740</td>\n",
       "      <td>931</td>\n",
       "      <td>22</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>740</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>386</td>\n",
       "      <td>291</td>\n",
       "      <td>19</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>291</td>\n",
       "      <td>389</td>\n",
       "      <td>19</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>202</td>\n",
       "      <td>921</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>740</td>\n",
       "      <td>742</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>740</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>742</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>921</td>\n",
       "      <td>681</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>921</td>\n",
       "      <td>386</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>108</td>\n",
       "      <td>291</td>\n",
       "      <td>18</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>108</td>\n",
       "      <td>177</td>\n",
       "      <td>16</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>291</td>\n",
       "      <td>177</td>\n",
       "      <td>16</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>740</td>\n",
       "      <td>177</td>\n",
       "      <td>20</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>931</td>\n",
       "      <td>987</td>\n",
       "      <td>20</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>931</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>987</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>108</td>\n",
       "      <td>437</td>\n",
       "      <td>21</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   node1 node2 overlap place_id\n",
       "0    987   584      18       11\n",
       "1    921   740      21       16\n",
       "2    921   742      19       16\n",
       "3    921   108      18       16\n",
       "4    740   931      22       19\n",
       "5    740   921      19       20\n",
       "6    386   291      19       39\n",
       "7    291   389      19       46\n",
       "8    202   921      18        2\n",
       "9    740   742      19       16\n",
       "10   740   108      18       16\n",
       "11   742   108      18       16\n",
       "12   921   681      16       18\n",
       "13   921   386      19       20\n",
       "14   108   291      18       21\n",
       "15   108   177      16       21\n",
       "16   291   177      16       21\n",
       "17   740   177      20       41\n",
       "18   931   987      20       42\n",
       "19   931   921      19       42\n",
       "20   987   921      19       42\n",
       "21   108   437      21       44"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graphdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "G = nx.Graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     [[66.09553125344267, -80.48788822184089], [66....\n",
       "1     [[56.30446897762444, -89.77163620522992], [56....\n",
       "2     [[46.25537765335525, -89.17099478948056], [46....\n",
       "3     [[46.939934972564885, -97.4248011277028], [46....\n",
       "4     [[48.317010657138034, -91.44721127200202], [48...\n",
       "5     [[68.6655799027421, -89.2438231239262], [68.66...\n",
       "6     [[49.36116647190814, -97.43664811070543], [49....\n",
       "7     [[69.63185989056731, -98.95519125206343], [69....\n",
       "8     [[55.767503123352434, -91.5302975556787], [55....\n",
       "9     [[60.12897147052702, -96.77239570483383], [60....\n",
       "10    [[68.77728485290706, -87.53190831564798], [68....\n",
       "11    [[47.40928549418557, -93.10841229192364], [47....\n",
       "12    [[54.428466791276286, -92.29046507099673], [54...\n",
       "13    [[61.32159734630038, -82.40397324016581], [61....\n",
       "14    [[47.42396618348471, -82.67853211380785], [47....\n",
       "15    [[59.849212686776184, -94.79552405835813], [59...\n",
       "16    [[61.747239801732896, -89.773130446531], [61.7...\n",
       "17    [[65.95126366509388, -97.66388154142113], [65....\n",
       "18    [[52.12320987140645, -86.7993173478801], [52.1...\n",
       "19    [[63.402667103833096, -83.23579590637183], [63...\n",
       "20    [[61.70797963413517, -93.29999873275585], [61....\n",
       "21    [[41.09478404258817, -94.94034312065521], [41....\n",
       "22    [[56.431259231439995, -91.59615305608621], [56...\n",
       "23    [[41.23806117407744, -94.57808445598046], [41....\n",
       "24    [[51.62378601942582, -90.67784072472776], [51....\n",
       "25    [[58.161116668987475, -93.7615246692467], [58....\n",
       "26    [[50.94273858146038, -82.54071530303726], [50....\n",
       "27    [[52.03840593299893, -92.44749216567381], [52....\n",
       "28    [[46.0359060305834, -88.69756561027458], [46.0...\n",
       "29    [[40.99703196836039, -89.43819774224653], [40....\n",
       "30    [[61.43774563634319, -89.3550347154993], [61.4...\n",
       "31    [[43.930473649605766, -94.99375722735928], [43...\n",
       "32    [[63.99819507538609, -92.50069561101787], [63....\n",
       "33    [[69.95068585022202, -92.19910399641472], [69....\n",
       "34    [[60.3642727076646, -92.87232911208746], [60.3...\n",
       "35    [[45.42386656596203, -86.26667860334652], [45....\n",
       "36    [[47.248757164325056, -99.92821620603088], [47...\n",
       "37    [[56.658774124301274, -82.79695753603333], [56...\n",
       "38    [[58.15637205342794, -83.50714178485565], [58....\n",
       "39    [[44.641682000528235, -86.17574551578299], [44...\n",
       "40    [[61.34832177570274, -83.4729740928413], [61.3...\n",
       "41    [[68.2049854628347, -87.04281843261819], [68.2...\n",
       "42    [[69.24235287842191, -81.1252861819712], [69.2...\n",
       "43    [[63.405644069280925, -84.0981071159519], [63....\n",
       "44    [[60.58422412560083, -80.76762530340255], [60....\n",
       "45    [[68.79452934860899, -93.37671948924822], [68....\n",
       "46    [[41.7639070795448, -82.3057865789268], [41.76...\n",
       "47    [[40.293147119526374, -84.43528490066902], [40...\n",
       "48    [[53.36044357984986, -90.53917977194392], [53....\n",
       "dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "weights = clusters.map(len)\n",
    "weights\n",
    "for idx,row in graphdf.iterrows():\n",
    "    G.add_edge(row.node1,row.node2,weight=weights[row.place_id])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx.draw_networkx(G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'987': 8.51586928150285,\n",
       " '584': 3.2003574278559563,\n",
       " '921': 19.940366060819898,\n",
       " '740': 10.52931385243848,\n",
       " '742': 5.903166808397174,\n",
       " '108': 11.989695342012944,\n",
       " '931': 8.325964180174463,\n",
       " '386': 5.377557308683922,\n",
       " '291': 8.563327012510019,\n",
       " '389': 2.527225183708882,\n",
       " '202': 3.4364951589768427,\n",
       " '681': 3.0423173943854644,\n",
       " '177': 5.878392167491279,\n",
       " '437': 2.769952821041822}"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pr = nx.pagerank(G, alpha=0.85, weight='weight')\n",
    "{ k : 100*v for k,v in pr.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'552': 0,\n",
       " '437': 1,\n",
       " '606': 0,\n",
       " '898': 0,\n",
       " '177': 0,\n",
       " '681': 0,\n",
       " '987': 0,\n",
       " '921': 0,\n",
       " '740': 0,\n",
       " '584': 0,\n",
       " '202': 0,\n",
       " '931': 0,\n",
       " '279': 0,\n",
       " '162': 0,\n",
       " '389': 1,\n",
       " '386': 0,\n",
       " '108': 0,\n",
       " '291': 0,\n",
       " '742': 0,\n",
       " '169': 0}"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "personalization={n : 0 for n in nodes}\n",
    "personalization['389']=1\n",
    "personalization['437']=1\n",
    "personalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'987': 3.444446522050013,\n",
       " '584': 0.8610865813629573,\n",
       " '921': 12.583140796284633,\n",
       " '740': 8.027843734423781,\n",
       " '742': 4.6378749251512765,\n",
       " '108': 17.33786134862907,\n",
       " '931': 4.3058499120792595,\n",
       " '386': 4.811615640703562,\n",
       " '291': 14.643185511508438,\n",
       " '389': 9.98936280348501,\n",
       " '202': 1.492465236056883,\n",
       " '681': 1.2437210300474026,\n",
       " '177': 6.665368376028895,\n",
       " '437': 9.956177582188804}"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pr = nx.pagerank(G, alpha=0.85,personalization=personalization, weight='weight')\n",
    "{ k : 100*v for k,v in pr.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node1</th>\n",
       "      <th>node2</th>\n",
       "      <th>overlap</th>\n",
       "      <th>place_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>987</td>\n",
       "      <td>584</td>\n",
       "      <td>18</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>921</td>\n",
       "      <td>740</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>921</td>\n",
       "      <td>742</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>921</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>740</td>\n",
       "      <td>931</td>\n",
       "      <td>22</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>740</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>386</td>\n",
       "      <td>291</td>\n",
       "      <td>19</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>291</td>\n",
       "      <td>389</td>\n",
       "      <td>19</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>202</td>\n",
       "      <td>921</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>740</td>\n",
       "      <td>742</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>740</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>742</td>\n",
       "      <td>108</td>\n",
       "      <td>18</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>921</td>\n",
       "      <td>681</td>\n",
       "      <td>16</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>921</td>\n",
       "      <td>386</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>108</td>\n",
       "      <td>291</td>\n",
       "      <td>18</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>108</td>\n",
       "      <td>177</td>\n",
       "      <td>16</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>291</td>\n",
       "      <td>177</td>\n",
       "      <td>16</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>740</td>\n",
       "      <td>177</td>\n",
       "      <td>20</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>931</td>\n",
       "      <td>987</td>\n",
       "      <td>20</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>931</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>987</td>\n",
       "      <td>921</td>\n",
       "      <td>19</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>108</td>\n",
       "      <td>437</td>\n",
       "      <td>21</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   node1 node2 overlap place_id\n",
       "0    987   584      18       11\n",
       "1    921   740      21       16\n",
       "2    921   742      19       16\n",
       "3    921   108      18       16\n",
       "4    740   931      22       19\n",
       "5    740   921      19       20\n",
       "6    386   291      19       39\n",
       "7    291   389      19       46\n",
       "8    202   921      18        2\n",
       "9    740   742      19       16\n",
       "10   740   108      18       16\n",
       "11   742   108      18       16\n",
       "12   921   681      16       18\n",
       "13   921   386      19       20\n",
       "14   108   291      18       21\n",
       "15   108   177      16       21\n",
       "16   291   177      16       21\n",
       "17   740   177      20       41\n",
       "18   931   987      20       42\n",
       "19   931   921      19       42\n",
       "20   987   921      19       42\n",
       "21   108   437      21       44"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "graphdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "betweenness_centrality() got an unexpected keyword argument 'distance'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-93-79aad47d8126>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mhc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbetweenness_centrality\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mG\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdistance\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'weight'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m{\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mv\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mv\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mbc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: betweenness_centrality() got an unexpected keyword argument 'distance'"
     ]
    }
   ],
   "source": [
    "hc = nx.betweenness_centrality(G,distance='weight')\n",
    "{k:v/len(bc.keys()) for k,v in bc.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'directed': False,\n",
       " 'multigraph': False,\n",
       " 'graph': {},\n",
       " 'nodes': [{'id': '987'},\n",
       "  {'id': '584'},\n",
       "  {'id': '921'},\n",
       "  {'id': '740'},\n",
       "  {'id': '742'},\n",
       "  {'id': '108'},\n",
       "  {'id': '931'},\n",
       "  {'id': '386'},\n",
       "  {'id': '291'},\n",
       "  {'id': '389'},\n",
       "  {'id': '202'},\n",
       "  {'id': '681'},\n",
       "  {'id': '177'},\n",
       "  {'id': '437'}],\n",
       " 'links': [{'weight': 5, 'source': '987', 'target': '584'},\n",
       "  {'weight': 6, 'source': '987', 'target': '931'},\n",
       "  {'weight': 6, 'source': '987', 'target': '921'},\n",
       "  {'weight': 6, 'source': '921', 'target': '740'},\n",
       "  {'weight': 4, 'source': '921', 'target': '742'},\n",
       "  {'weight': 4, 'source': '921', 'target': '108'},\n",
       "  {'weight': 6, 'source': '921', 'target': '202'},\n",
       "  {'weight': 5, 'source': '921', 'target': '681'},\n",
       "  {'weight': 6, 'source': '921', 'target': '386'},\n",
       "  {'weight': 6, 'source': '921', 'target': '931'},\n",
       "  {'weight': 6, 'source': '740', 'target': '931'},\n",
       "  {'weight': 4, 'source': '740', 'target': '742'},\n",
       "  {'weight': 4, 'source': '740', 'target': '108'},\n",
       "  {'weight': 3, 'source': '740', 'target': '177'},\n",
       "  {'weight': 4, 'source': '742', 'target': '108'},\n",
       "  {'weight': 4, 'source': '108', 'target': '291'},\n",
       "  {'weight': 4, 'source': '108', 'target': '177'},\n",
       "  {'weight': 4, 'source': '108', 'target': '437'},\n",
       "  {'weight': 4, 'source': '386', 'target': '291'},\n",
       "  {'weight': 3, 'source': '291', 'target': '389'},\n",
       "  {'weight': 4, 'source': '291', 'target': '177'}]}"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from networkx.readwrite import json_graph\n",
    "json_graph.node_link_data(G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "metricsdf = pd.DataFrame({'pagerank':pr , 'harmonic_centrality':hc}).sort_values(by=['pagerank'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'pagerank': {'584': 0.008610865813629574,\n",
       "  '681': 0.012437210300474026,\n",
       "  '202': 0.014924652360568832,\n",
       "  '987': 0.03444446522050013,\n",
       "  '931': 0.0430584991207926,\n",
       "  '742': 0.046378749251512766,\n",
       "  '386': 0.04811615640703562,\n",
       "  '177': 0.06665368376028895,\n",
       "  '740': 0.08027843734423781,\n",
       "  '437': 0.09956177582188803,\n",
       "  '389': 0.09989362803485011,\n",
       "  '921': 0.12583140796284634,\n",
       "  '291': 0.14643185511508439,\n",
       "  '108': 0.1733786134862907},\n",
       " 'harmonic_centrality': {'584': 0.9574713856834598,\n",
       "  '681': 1.2325369075369075,\n",
       "  '202': 1.1228418640183349,\n",
       "  '987': 1.3473516679399031,\n",
       "  '931': 1.3704476079476078,\n",
       "  '742': 1.8115440115440118,\n",
       "  '386': 1.483498854087089,\n",
       "  '177': 1.877570528886318,\n",
       "  '740': 1.9418321874204223,\n",
       "  '437': 1.3930827943985837,\n",
       "  '389': 1.4227336389101093,\n",
       "  '921': 2.0901515151515153,\n",
       "  '291': 1.950525351841141,\n",
       "  '108': 2.245634920634921}}"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metricsdf.to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
